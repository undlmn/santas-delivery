import { readFile, writeFile } from "node:fs/promises";

const tmap = JSON.parse(
  await readFile(new URL("./map.tmj", import.meta.url), { encoding: "utf8" })
);

const empty = {
  house: [1, [0]],
  chimney: [0, 0],
  santa: [0, -1],
};

const map = Array(20).fill(empty);

for (const group of tmap.layers) {
  const level = Number(group.name?.match(/^Level (\d+)$/)?.[1]);
  if (group.type != "group" && !level) {
    continue;
  }
  console.log(`Level ${level}`);

  const levelMap = (map[level - 1] = {
    ...empty,
    sleighToLeft: !!group.properties?.find(
      (item) => (item.name = "Sleigh to Left")
    )?.value,
  });
  for (const layer of group.layers) {
    switch (layer.type) {
      case "tilelayer":
        levelMap.house = [layer.width, layer.data];
        break;

      case "objectgroup":
        for (const object of layer.objects) {
          const x = Math.round(object.x / 16);
          const y = Math.round(object.y / 16) - 1;
          switch (object.gid) {
            case 7:
              levelMap.chimney = [x, y];
              break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
              levelMap.santa = [x, y, 0];
              break;
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
              levelMap.santa = [x, y, 1];
              break;
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
              (levelMap.gifts || (levelMap.gifts = [])).push([
                x,
                y,
                object.gid - 35,
              ]);
              break;
            case 44:
              (levelMap.trees || (levelMap.trees = [])).push([
                x,
                y,
                +object.name || 1,
              ]);
              break;
            case 49:
            case 50:
            case 51:
            case 52:
              (levelMap.fires || (levelMap.fires = [])).push([x, y]);
              break;
            case 53:
              (levelMap.snowballs || (levelMap.snowballs = [])).push([x, y]);
              break;
            case 61:
              (levelMap.barriers || (levelMap.barriers = [])).push([x, y]);
              break;
          }
        }
        break;
    }
  }
}

await writeFile(
  new URL("../map.js", import.meta.url),
  `\
// Generated by ./tiled/convert.js
// Do not edit
export default ${JSON.stringify(map)};
`
);
